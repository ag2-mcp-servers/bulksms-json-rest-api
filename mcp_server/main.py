# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T17:33:10+00:00



import argparse
import json
import os
from datetime import datetime
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBasic
from fastapi import Query

from models import (
    BlockedNumber,
    BlockedNumbersPostRequest,
    Error,
    Message,
    MessagesGetResponse,
    MessagesIdRelatedReceivedMessagesGetResponse,
    MessagesPostRequest,
    MessagesPostResponse,
    MessagesSendGetResponse,
    PreSignInfo,
    PreSignRequest,
    Profile,
    SortOrder,
    TransferEntry,
    Webhook,
    WebhookEntry,
    WebhooksGetResponse,
)

app = MCPProxy(
    description='## Overview\n\nThe JSON REST API allows you to submit and receive [BulkSMS](https://www.bulksms.com/) messages. You can also get access to past messages and see your account profile.\n\nThe base URL to use for this service is `https://api.bulksms.com/v1`.  The base URL cannot be used on its own; you must append a path that identifies an operation and you may have to specify some path parameters as well.\n\n[Click here](/developer/) to go to the main BulkSMS developer site.\n\nIn order to give you an idea on how the API can be used, some JSON snippets are provided below.  Have a look at the [messages section](#tag/Message) for more information.\n\nProbably the most simple example\n\n```\n{\n    "to": "+27001234567",\n    "body": "Hello World!"\n}\n```\n\n\nYou can send unicode automatically using the `auto-unicode` query parameter. \nAlternatively, you can specify `UNICODE` for the `encoding` property in the request body. \nPlease note: when `auto-unicode` is specified and the value of the `encoding` property is `UNICODE`, the message will always be sent as `UNICODE`.\n\nHere is an example that sets the `encoding` explicitly\n\n```\n{\n  "to": "+27001234567",\n  "body": "Dobrá práce! Jak se máš?",\n  "encoding": "UNICODE"\n}\n```\n\nYou can also specify a from number\n\n```\n{\n    "from": "+27007654321",\n    "to": "+27001234567",\n    "body": "Hello World!"\n}\n```\n\nSimilar to above, but repliable\n\n```\n{\n    "from": { "type": "REPLIABLE" },\n    "to": "+27001234567",\n    "body": "Hello World!"\n}\n```\n\nA message to a group called Everyone\n\n```\n{\n    "to": { "type": "GROUP", "name": "Everyone" },\n    "body": "Hello World!"\n}\n```\n\nA message to multiple recipients\n\n```\n{\n    "to": ["+27001234567", "+27002345678", "+27003456789"],\n    "body": "Happy Holidays!"\n}\n```\n\nSending more than one message in the same request\n\n```\n[\n    {\n        "to": "+27001234567",\n        "body": "Hello World!"\n    },\n    {\n        "to": "+27002345678",\n        "body": "Hello Universe!"\n    }\n]\n```\n\n**The insecure base URL `http://api.bulksms.com/v1` is deprecated** and may in future result in a `301` redirect response, or insecure requests may be rejected outright. Please use the secure (`https`) URI above.\n\n### HTTP Content Type\n\nAll API methods expect requests to supply a `Content-Type` header with the value `application/json`. All responses will have the `Content-Type` header set to `application/json`.\n\n### JSON Formatting\n\nYou are advised to format your JSON resources according to strict JSON format rules. While the API does attempt to parse strictly invalid JSON documents, doing so may lead to incorrect interpretation and unexpected results.\n\nGood JSON libraries will produce valid JSON suitable for submission, but if you are manually generating the JSON text, be careful to follow the JSON format. This include correct escaping of control characters and double quoting of property names.\n\nSee the [JSON specification](https://tools.ietf.org/html/rfc4627) for further information.\n\n### Date Formatting\n\nDates are formatted according to ISO-8601, such as `1970-01-01T10:00:00+01:00` for 1st January 1970, 10AM UTC+1.\n\nSee the [Wikipedia ISO 8601 reference](https://en.wikipedia.org/wiki/ISO_8601) for further information.\n\nSpecifically, calendar dates are formatted with the \'extended\' format `YYYY-MM-DD`. Basic format, week dates and ordinal dates are not supported. Times are also formatted in the \'extended\' format `hh:mm:ss`. Hours, minutes and seconds are mandatory. Offset from UTC must be provided; this is to ensure that there is no misunderstanding regarding times provided to the API.\n\nThe format we look for is `yyyy-MM-ddThh:mm:ss[Z|[+-]hh:mm]`\n\nExamples of valid date/times are`2011-12-31T12:00:00Z` `2011-12-31T12:00:00+02:00`\n\n### Entity Format Modifications\n\nIt is expected that over time some changes will be made to the request and response formats of various methods available in the API.\nWhere possible, these will be implemented in a backwards compatible way.\nTo make this possible you are required to ignore unknown properties.\nThis enables the addition of information in response documents while maintaining compatibility with older clients.\n\n### Optional Request Entity Properties\n\nThere are many instances where requests can be made without having to specify every single property allowable in the request format.\nAny such optional properties are noted as such in the documentation and their default value is noted.\n',
    title='BulkSMS JSON REST API',
    version='1.0.0',
    servers=[{'url': 'https://api.bulksms.com/v1'}],
)


@app.get(
    '/blocked-numbers',
    tags=['blocked_number_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_blocked_numbers(
    min_id: Optional[int] = Query(None, alias='min-id'), limit: Optional[int] = None
):
    """
    List blocked numbers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/blocked-numbers',
    description=""" Blocked numbers are phone numbers to which your account is not permitted to send messages.
The numbers can be created via this API, by a recipient replying with a STOP message to one
of your previous SENT messages, or by a BulkSMS administrator.

Sending a message to a blocked number will result in the message being assigned a status of
`FAILED.BLOCKED`. Messages sent to blocked numbers are billed to your account.
 """,
    tags=['blocked_number_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def post_blocked_numbers(body: BlockedNumbersPostRequest):
    """
    Create a blocked number
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/credit/transfer',
    description=""" Before you can use the transfer credits endpoint, the _credit-transfer facility_ must be activated for your account.  You can request activation from `support@bulksms.com`. 

The recipient must be an enabled account that uses the same currency as your account.
 """,
    tags=['credit_transfer_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def post_credit_transfer(body: TransferEntry):
    """
    Transfer credits to another account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/messages',
    description=""" Retrieve the messages you have sent or received.  

Scheduled messages are available for retrieval only after the delivery date.

All the parameters are optional.  If a value is not supplied for `filter`, the messages are not filtered.

Messages can be filtered by supplying query clauses in the `filter` parameter. Each clause has the form `name=value` where `name` is the name of a filter field and `value` is a valid value for that field.  A value for a field is optional. Include a clause for a field in the filter only when there is a need to fetch messages that match some value for that field.
For a numeric filter field, you can also use the less than operator (`<`).

If present, the filter value must have at least one clause, but it can contain a combination of clauses. Multiple clauses are separated with the `&` symbol.  Semantically, multiple clauses form a [logical conjunction](https://en.wikipedia.org/wiki/Logical_conjunction).

For example, if you want to list all messages that were sent as part of a particular submission, your filter contains two clauses and will look something like this
```
type%3DSENT&submission.id%3D1-00000000000522347562
```
Because `filter` is a request parameter, it is important to note that the value for this parameter must be *URL encoded*. In particular, the `=` encodes to `%3D` and the `&` encodes to `%26`.  Note that you do not have to encode the `<` character.

Using the previous example to illustrate; after encoding and encasing it, the clauses are transformed into a request that looks like this
```
GET /v1/messages?filter=type%3DSENT%26submission.id%3D1-00000000000522347562
```
If the field name or the field value of a clause is not valid, a [bad_request error](errors#bad-request) is returned instead of the usual result.  The `detail` field of this error provides more information about the problem.

The table below lists the fields available for filtering

| Field | Type   | Values | Note and example |
|-------|------|--------------------|------|
| id            | Integer  | Positive integer  | Use the `id` field with `<` (or with `>`) to fetch messages that are older (or newer) than those that are already fetched. <br/>`filter=id<123456` |
| type          | String  | SENT, RECEIVED  | SENT are Mobile Terminating (MT) SMSs; RECEIVED are Mobile Originating (MO) SMSs.<br/>`filter=type%3DSENT` |
| submission.id | String  |  | `filter=submission.id%3D1-00000000000522347562` |
| status.type   | String  | ACCEPTED, SENT, DELIVERED, FAILED  | See the message `status.type` field for more information. <br/>`filter=status.type%3DDELIVERED` |
| status.id| String  |  | See the message `status.id` field for more information. `filter=status.id%3DFAILED.EXPIRED`|
| submission.date | String | Formatted Date | A fully specified date (e.g. 2017-01-01T10:00:00+01:00).  Use this field with `<=`, `<`, `>` or `>=` to limit the values. <br/>`filter=submission.date%3E%3D2017-01-01T10%3A00%3A00%2B01%3A00` |
| userSuppliedId  | String | | Use a string value you specified in the `userSuppliedId` property when you sent the message. Only `SENT` messages will be retrieved. <br/>`filter=userSuppliedId%3Dacc009876` |
 """,
    tags=['message_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_messages(
    limit: Optional[float] = None,
    filter: Optional[str] = None,
    sort_order: Optional[SortOrder] = Query(None, alias='sortOrder'),
):
    """
    Retrieve Messages
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/messages',
    description=""" Send messages to one or more recipients.

You can post up to `30 000` messages in a batch. 
But note that the `deduplication-id` is set per submission, so it is recommended that you use a smaller number, like `4000` per submission in order to make resubmissions on network failures more practical.

#### Repliability

When a sent message is _repliable_,  the BulkSMS system can process an SMS response sent by your recipient.

The message sent by your customer is called a mobile originating (MO) message and would be available under `RECEIVED` messages. 
You can obtain a list of MOs using the [retrieve messages API call](#tag/Message%2Fpaths%2F~1messages%2Fget).
In addition you can also get a list of the MOs that are associated with a specific sent message (see the [list related messages API call](#tag/Message%2Fpaths%2F~1messages~1%7Bid%7D~1relatedReceivedMessages%2Fget)).

If you use a specific _sender id_ in the `from` property of the send message, the message will not be repliable.
If you want a message to be repliable, you need to specify `REPLIABLE` in the `from.type` property.

If you do not set the `from` property, your account settings are considered to determine whether or not the message is repliable.
If the _default repliable_ setting on your account is _yes_ then the message will be repliable. 
If this setting is _no_, the message will not be repliable.


#### Body templates

When sending a message you can use template fields to customise the message text.

*Field based templates* allow you to create a message with place-holders for custom fields.  Fields are identified by a zero based index; the first field is `F0`, the second is `F1` and so on.  

For example, let's say you want to send a daily SMS message to all your clients that tell them what their current balance is.  The `body` of the message could look something like this 

```
Good morning {F0######}, your balance is {F1######}
```

In this message, the first field, `F0`, is the name  of the customer and he second field `F1` is the balance for that customer.  The `#` used to specify the maximum length  of the field.  Note that the maximum length allowed for the value includes the space taken by the braces, template name and hash symbol.  For example, the value `{F0#}` specifies a maximum length of `5`.  If the data is longer than this length, the data will be truncated when the message body is constructed.

The data fields are provided in the property named `fields` in the `to` element.  Here is a complete example of how this might look

```
{
  "body": "Good morning {F0######}, your balance is {F1######}",
  "to":  [
      {"address": "27456789","fields": ["Harry", "$1345.23"] },
      {"address": "27456785","fields": ["Sally", "$2345.58"] }
  ]
}
```

If you are sending to contacts (or to groups) in your phonebook, you can use the *Phonebook based templates*.  These are similar to the templates described above, but they have specific names. The template for the contact's first name is identified by `fn` and the template for the contact's surname is identified by `sn`.  Below in an example that will work if the numbers are registered in your phonebook. 

```
{
  "body": "Hi {fn######} {sn######}, have a great day!",
  "to":  [
      {"address": "27456789" },
      {"address": "27456785" }
  ]
}
```
 """,
    tags=['message_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def post_messages(
    deduplication_id: Optional[int] = Query(None, alias='deduplication-id'),
    auto_unicode: Optional[bool] = Query(False, alias='auto-unicode'),
    schedule_date: Optional[datetime] = Query(None, alias='schedule-date'),
    schedule_description: Optional[str] = Query(None, alias='schedule-description'),
    body: MessagesPostRequest = ...,
):
    """
    Send Messages
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/messages/send',
    description=""" A really simple interface for people who require a GET mechanism to submit a single message.

The URI is interpreted as UTF-8. HTTP Basic Auth is used for authentication.

__Note__ BulkSMS recommends that you use the more flexible Send Messages Operation when submitting SMS messages from your application.

Here is an example of a GET
```http
GET /v1/messages/send?to=%2b270000000&body=Hello%20World
```

You can also use the same parameters to POST form encoded fields to `/messages`.
Here is an example of a POST
```http
POST /v1/messages
Content-Type: application/x-www-form-urlencoded

to=%2b27000000000&body=Hello+World
```
 """,
    tags=['message_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_messages_send(
    to: str,
    body: str = ...,
    deduplication_id: Optional[int] = Query(None, alias='deduplication-id'),
):
    """
    Send message by simple GET or POST
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/messages/{id}',
    description=""" Get a the message by `id`.
```http
GET /v1/messages/4023457654
```
 """,
    tags=['message_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_messages__id(id: str):
    """
    Show Message
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/messages/{id}/relatedReceivedMessages',
    description=""" Get the messages related to a sent message identified by `id`.

For more information how this work, see the `relatedSentMessageId` field in the message.
 """,
    tags=['message_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_messages__id_related_received_messages(id: str):
    """
    List Related Messages
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/profile',
    description=""" Returns information about your user profile """,
    tags=['user_profile_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_profile():
    """
    Get profile
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rmm/pre-sign-attachment',
    description=""" When composing an SMS, you can add SMS attachments by adding a URL to your text. When the recipient clicks on the URL, the attached file will be downloaded and opened on their mobile device.  

The best way to do this is to store the file on a web server you own and use that URL in the SMS text. This URL will be easily recognisable to your message recipient and ties your message back to your brand or company. 

If that’s not possible, you can use BulkSMS storage to keep the files that you want to attach to your SMS. These files will be deleted after 30 days as per our fair use policy.  

We recommend you keep this file size below 20 MB, as larger files may be deleted without warning. 

To use the BulkSMS storage, follow these three steps:

**Step 1**: Use your BulkSMS credentials (or your API Token) to request a pre-signed URL.  This is what this `pre-sign-attachment` method is for.  It returns a PreSignInfo object that you will use in the other two steps.

**Step 2**: Upload the file using a standard HTTP `PUT` request. For your `PUT` request, use the value of `putURL` from the PreSignInfo object as the request address.  You also have to add the entries from the `fields` property (of the PreSignInfo object) to the headers of your 'PUT' request. You send the file content as the body of the `PUT` request.

**Step 3**: Now you can use the value of `fetchURL` from the PreSignInfo object in the body of your SMS messages and send those using the usual messaging API (described elsewhere in this document).  If you send the same file to many recipients, it is safe to use the same URL for all of them.

If you need to, take a closer look at the example program (on the right-hand side) to get a better idea of how to implement this process.
 """,
    tags=['webhook_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def post_rmm_pre_sign_attachment(body: PreSignRequest):
    """
    Upload an attachment via a signed URL
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/webhooks',
    description=""" Contains a list of your webhooks """,
    tags=['webhook_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_webhooks():
    """
    List webhooks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/webhooks',
    description=""" A webhook is an URL that you can register when you want the BulkSMS system to notify you about your messages.
You can register multiple webhooks, and each one will be called.  (Note: you can also use our [Web App](https://www.bulksms.com/account/#!/advanced-settings/webhooks) to manage your webhooks interactively.)  
If you want to be notified of `SENT` messages and `RECEIVED` messages you need to create two webhooks.


### Implementing your webhook

Code samples of Webhook implementations:
* [PHP](samples/webhook-php.html)

When you implement your webhook, there are a few rules to be aware of:
- Your webhook must process `POST` requests that contains an array of messages in the post body.  This input given to your webhook has the same structure as the output produced when you call [Retrieve Messages](#tag/Message%2Fpaths%2F~1messages%2Fget).
- When you register or update your webhook, the URL will be tested by invoking it with an empty array (`[]`). 
- It is possible for your webhook to receive multiple updates for the same message and status. It happens from time to time that the mobile network duplicates status updates.
- The order by which the webhook is invoked can be unexpected.  For example, if sender A replies before sender B, your webhook might get the reply from B first.
- The webhook is expected to comply with good practices with regard to the status code it responds with.
  - A status code in the `1xx` and `2xx` range is taken as an acknowledgement that the invocation was received and that the webhook host is ready to receive another.
  - A status code in the `4xx` range is taken as a permanent problem and indicates that the webhook cannot process the message. The specific message that caused the error will be discarded, but your webhook will be invoked again when another message becomes available.
  - Any other status code will be taken as a temporary problem; and indicates that the BulkSMS system should retry. The specific message that caused the error will not be discarded and your webhook will be invoked again with this message (see the subsequent section for more details on retry processing).
- Your webhook has to respond within `30` seconds.  If no response is given in this time, the invocation will be retried.
- It is good idea to add a secret to your URL in order to make it more secure. Here is an example:
`https://www.example.com/hook.php?secret=pass763265word`
- You can use a non-standard port if necessary, for example: `https://www.example.com:8321/hook.php?secret=pass763265word`
- Your webhook can be called from a dynamic range of IP addresses, and you should be prepared to accept that the source IP can change in the future, without notice. This practice has become common with cloud-hosted solutions. If this is an insurmountable problem for your organisation, please contact support.

### Testing and troubleshooting        

Use `curl` to test your webhook.  The command below is a template that shows how the BulkSMS system invokes your code. It must return `200` for your URL before you can register it as a webhook. 

```
curl -i -X POST 'YOUR_URL_HERE' --header 'Content-Type: application/json' --header 'User-Agent: BulkSMS Invoker' --data-raw '[]'
```

When a `200` is returned for an empty array, modify the template to post multiple messages by adding JSON between the square brackets ('[]').

After your webhook is successfully registered, you can send a message to `1111111` for an end-to-end test.  The delivery to this test number will fail, but your webhook will be invoked (and there are no charges).  

### The retry process

The process the BulkSMS systems follow to handle retries is roughly the following:
- The first retry is scheduled for 90 seconds into the future.
- After the first retry, subsequent failures will have longer delays, following this sequence - 3 minutes, 6 minutes, 12 minutes thereafter the message will be retried every 15 minutes for a 2 day period.
- When all retries fail, the message will be discarded.

### Problem reports via email

Your are strongly advised to provide an email address when you register your webhook.
A notice will be sent to this email address to keep you in the loop whenever there are problems with your webhook.
In order to prevent your inbox from being flooded, the system sends a notice about an observed error no more than once in a 24 hour period.

The following emails can be expected
 - A __message retrying__ email is sent after an invocation has failed with a retry-able error.  This email is an early warning, allowing you to investigate your systems.
 - A __message discarded__ email is sent after failure email is send when a message is discarded as a consequence of a non-retry-able error.
 """,
    tags=['webhook_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def post_webhooks(body: WebhookEntry):
    """
    Create a webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/webhooks/{id}',
    tags=['webhook_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_webhooks__id(id: str):
    """
    Delete a webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/webhooks/{id}',
    tags=['webhook_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_webhooks__id(id: str):
    """
    Read a webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/webhooks/{id}',
    tags=['webhook_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def post_webhooks__id(id: str, body: WebhookEntry = ...):
    """
    Update a webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
